import telegram
from telegram.ext import (CommandHandler,MessageHandler,ConversationHandler,RegexHandler,Filters)
from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove)
import logging
from dbrepo import DBRepo
import botconfig as config

reply_keyboard_main_menu = [['–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ üèÜ'], ['–°–∏–≥–Ω–∞–ª—ã üí∞'], ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìÇ','–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üìû'], ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üîê']]
finishPattern = '^(/finish)$'
anyTextPattern = "^(?![/cancel])^(?!\s*$).+"
onlyDigitsPattern = "^\d+$"
reply_state = {}
logger = logging.getLogger('btcLogger')

PASSWORD, GETTEXT, GETCHATID, FINISH = range(4)

def publishReply(bot, update):
  logger.info('publishReply starts for chat_id {0}'.format(update.message.chat_id))
  bot.send_message(chat_id=update.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä–æ–ª—å:")
  return PASSWORD
 
def password(bot, update):
  bot.send_message(chat_id=update.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard_main_menu, one_time_keyboard=True), parse_mode=telegram.ParseMode.HTML)
  return GETTEXT

def text(bot, update):
  global reply_state
  reply_state["text_for_{0}".format(update.message.chat_id)] = update.message.text
  bot.send_message(chat_id=update.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardMarkup(reply_keyboard_main_menu, one_time_keyboard=True), parse_mode=telegram.ParseMode.HTML)
  return GETCHATID

def chatId(bot, update):
  global reply_state
  reply_state["chatid_for_{0}".format(update.message.chat_id)] = update.message.text
  logger.info('publishReply sends to user with id {0}'.format(update.message.text))
  bot.send_message(chat_id=update.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ /finish –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
  return FINISH

def finish(bot, update):
  global reply_state
  bot.send_message(chat_id=reply_state["chatid_for_{0}".format(update.message.chat_id)], text="<b>–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> \n {0}".format(reply_state["text_for_{0}".format(update.message.chat_id)]), reply_markup=ReplyKeyboardMarkup(reply_keyboard_main_menu, one_time_keyboard=True), parse_mode=telegram.ParseMode.HTML)
  bot.send_message(chat_id=update.message.chat_id, text="–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(reply_keyboard_main_menu, one_time_keyboard=True), parse_mode=telegram.ParseMode.HTML)
  del reply_state["chatid_for_{0}".format(update.message.chat_id)]
  logger.info('publishReply finished successfully. Reply = {0}'.format(reply_state["text_for_{0}".format(update.message.chat_id)]))
  del reply_state["text_for_{0}".format(update.message.chat_id)]


  return ConversationHandler.END

def cancel(bot, update):
  bot.send_message(chat_id=update.message.chat_id, text="–û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", reply_markup=ReplyKeyboardMarkup(reply_keyboard_main_menu, one_time_keyboard=True), parse_mode=telegram.ParseMode.HTML)
  global reply_state
  if "chatid_for_{0}".format(update.message.chat_id) in reply_state:
    del reply_state["chatid_for_{0}".format(update.message.chat_id)]
  if "text_for_{0}".format(update.message.chat_id) in reply_state:
    del reply_state["text_for_{0}".format(update.message.chat_id)]
  return ConversationHandler.END

publishreply_conv_handler = ConversationHandler(
  entry_points=[CommandHandler('publishreply', publishReply)],
  states={
  PASSWORD: [RegexHandler(config.MANAGERPASS, password)],
  GETTEXT: [RegexHandler(anyTextPattern, text)],
  GETCHATID: [RegexHandler(onlyDigitsPattern, chatId)],
  FINISH: [RegexHandler(finishPattern, finish)]
  },

  fallbacks=[CommandHandler('cancel', cancel)]
)

def get_publishreply_conv_handler():
  return publishreply_conv_handler